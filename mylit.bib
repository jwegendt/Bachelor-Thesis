@article{10.1145/357162.357169,
author = {Martelli, Alberto and Montanari, Ugo},
title = {An Efficient Unification Algorithm},
year = {1982},
issue_date = {April 1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {2},
issn = {0164-0925},
url = {https://doi.org/10.1145/357162.357169},
doi = {10.1145/357162.357169},
journal = {ACM Trans. Program. Lang. Syst.},
month = apr,
pages = {258–282},
numpages = {25}
}
@article{10.1093/logcom/1.4.497,
    author = {Miller, Dale},
    title = "{A Logic Programming Language with Lambda-Abstraction, Function Variables, and Simple Unification}",
    journal = {Journal of Logic and Computation},
    volume = {1},
    number = {4},
    pages = {497-536},
    year = {1991},
    month = {09},
    abstract = "{It has been argued elsewhere that a logic programming language with function variables and λ-abstractions within terms makes a good meta-programming language, especially when an object-language contains notions of bound variables and scope. The λProlog logic programming language and the related Elf and Isabelle systems provide meta-programs with both function variables and λ-abstractions by containing implementations of higher order unification. This paper presents a logic programming language, called Lλ, that also contains both function variables and λ-abstractions, although certain restrictions are placed on occurrences of function variables. As a result of these restrictions, an implementation of Lλdoes not need to implement full higher-order unification. Instead, an extension to first-order unification that respects bound variable names and scopes is all that is required. Such unification problems are shown to be decidable and to possess most general unifiers when unifiers exist. A unification algorithm and logic programming interpreter are described and proved correct. Several examples of using Lλ as a meta-programming language are presented.}",
    issn = {0955-792X},
    doi = {10.1093/logcom/1.4.497},
    url = {https://doi.org/10.1093/logcom/1.4.497},
    eprint = {https://academic.oup.com/logcom/article-pdf/1/4/497/3817142/1-4-497.pdf},
}
@inproceedings{10.5555/2021953.2021960,
author = {Abel, Andreas and Pientka, Brigitte},
title = {Higher-order dynamic pattern unification for dependent types and records},
year = {2011},
isbn = {9783642216909},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {While higher-order pattern unification for the λΠ-calculus is decidable and unique unifiers exists, we face several challenges in practice: 1) the pattern fragment itself is too restrictive for many applications; this is typically addressed by solving sub-problems which satisfy the pattern restriction eagerly but delay solving sub-problems which are non-patterns until we have accumulated more information. This leads to a dynamic pattern unification algorithm. 2) Many systems implement λΠΣ calculus and hence the known pattern unification algorithms for λΠ are too restrictive.In this paper, we present a constraint-based unification algorithm for λΠΣ-calculus which solves a richer class of patterns than currently possible; in particular it takes into account type isomorphisms to translate unification problems containing Σ-types into problems only involving Π-types. We prove correctness of our algorithm and discuss its application.},
booktitle = {Proceedings of the 10th International Conference on Typed Lambda Calculi and Applications},
pages = {10–26},
numpages = {17},
location = {Novi Sad, Serbia},
series = {TLCA'11}
}
@InProceedings{10.1007/978-3-030-17184-1_5,
author="Downen, Paul
and Sullivan, Zachary
and Ariola, Zena M.
and Peyton Jones, Simon",
editor="Caires, Lu{\'i}s",
title="Codata in Action",
booktitle="Programming Languages and Systems",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="119--146",
abstract="Computer scientists are well-versed in dealing with data structures. The same cannot be said about their dual: codata. Even though codata is pervasive in category theory, universal algebra, and logic, the use of codata for programming has been mainly relegated to representing infinite objects and processes. Our goal is to demonstrate the benefits of codata as a general-purpose programming abstraction independent of any specific language: eager or lazy, statically or dynamically typed, and functional or object-oriented. While codata is not featured in many programming languages today, we show how codata can be easily adopted and implemented by offering simple inter-compilation techniques between data and codata. We believe codata is a common ground between the functional and object-oriented paradigms; ultimately, we hope to utilize the Curry-Howard isomorphism to further bridge the gap.",
isbn="978-3-030-17184-1"
}
@article{HAGINO1989629,
title = {Codatatypes in ML},
journal = {Journal of Symbolic Computation},
volume = {8},
number = {6},
pages = {629-650},
year = {1989},
issn = {0747-7171},
doi = {https://doi.org/10.1016/S0747-7171(89)80065-3},
url = {https://www.sciencedirect.com/science/article/pii/S0747717189800653},
author = {Tatsuya Hagino},
abstract = {A new data type declaration mechanism of defining codatatypes is introduced to a functional programming language ML. Codatatypes are dual to datatypes for which ML already has a mechanism of defining. Sums and finite lists are defined as datatypes, but their duals, products and infinite lists, could not be defined in ML. This new facility gives ML the missing half of data types and makes ML symmetric. Categorical and domain-theoretic characterization of codatatypes are also given.}
}
@book{binder2024programming,
  title={Programming with Symmetric Data and Codata Types},
  author={Binder, D.},
  url={https://books.google.de/books?id=0EcD0QEACAAJ},
  year={2024},
  publisher={Eberhard Karls Universit{\"a}t T{\"u}bingen}
}
@article{HUET1973257,
title = {The undecidability of unification in third order logic},
journal = {Information and Control},
volume = {22},
number = {3},
pages = {257-267},
year = {1973},
issn = {0019-9958},
doi = {https://doi.org/10.1016/S0019-9958(73)90301-X},
url = {https://www.sciencedirect.com/science/article/pii/S001999587390301X},
author = {Gerard P. Huet},
abstract = {The problem of the existence of a unifying substitution between two terms is considered in type theory. This problem is shown to be undecidable, even if we restrict the objects of the language to third order. This means that we are not able to recognize whether two terms have a common instance or not. This result has important implications for the mechanization of higher order logic.}
}
@article{10.1145/321250.321253,
author = {Robinson, J. A.},
title = {A Machine-Oriented Logic Based on the Resolution Principle},
year = {1965},
issue_date = {Jan. 1965},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/321250.321253},
doi = {10.1145/321250.321253},
journal = {J. ACM},
month = jan,
pages = {23–41},
numpages = {19}
}
@InProceedings{10.1007/3-540-15975-4_48,
author="Augustsson, Lennart",
editor="Jouannaud, Jean-Pierre",
title="Compiling pattern matching",
booktitle="Functional Programming Languages and Computer Architecture",
year="1985",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="368--381",
isbn="978-3-540-39677-2"
}
@article{GOLDFARB1981225,
title = {The undecidability of the second-order unification problem},
journal = {Theoretical Computer Science},
volume = {13},
number = {2},
pages = {225-230},
year = {1981},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(81)90040-2},
url = {https://www.sciencedirect.com/science/article/pii/0304397581900402},
author = {Warren D. Goldfarb},
abstract = {It is shown that there is no effective procedure for determining whether or not two terms of the language of second-order logic have a common instance.}
}